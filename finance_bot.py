import asyncio
import logging
import os
from datetime import datetime
from typing import Optional

import aiohttp
import asyncpg
from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup

from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
DB_CONFIG = {
    'host': os.getenv("DB_HOST"),
    'port': int(os.getenv("DB_PORT", 5432)),
    'user': os.getenv("DB_USER"),
    'password': os.getenv("DB_PASSWORD"),
    'database': os.getenv("DB_NAME")
}
CURRENCY_SERVICE_URL = os.getenv("CURRENCY_SERVICE_URL")

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class RegistrationStates(StatesGroup):
    waiting_for_name = State()

class OperationStates(StatesGroup):
    waiting_for_type = State()
    waiting_for_amount = State()
    waiting_for_date = State()
    waiting_for_comment = State()

class ViewOperationsStates(StatesGroup):
    waiting_for_currency = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

db_pool = None

async def init_db():
    global db_pool
    db_pool = await asyncpg.create_pool(**DB_CONFIG)
    async with db_pool.acquire() as conn:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS users (
                id SERIAL PRIMARY KEY,
                name VARCHAR(255) NOT NULL,
                chat_id BIGINT UNIQUE NOT NULL
            )
        ''')
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS operations (
                id SERIAL PRIMARY KEY,
                date DATE NOT NULL,
                amount DECIMAL(10, 2) NOT NULL,
                chat_id BIGINT NOT NULL,
                type_operation VARCHAR(10) NOT NULL CHECK (type_operation IN ('–î–û–•–û–î', '–†–ê–°–•–û–î')),
                comment TEXT,
                FOREIGN KEY (chat_id) REFERENCES users(chat_id)
            )
        ''')

async def is_user_registered(chat_id: int) -> bool:
    async with db_pool.acquire() as conn:
        cnt = await conn.fetchval('SELECT COUNT(*) FROM users WHERE chat_id = $1', chat_id)
        return cnt > 0

async def get_exchange_rate(currency: str) -> Optional[float]:
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{CURRENCY_SERVICE_URL}?currency={currency}") as resp:
                if resp.status == 200:
                    data = await resp.json()
                    return data.get('rate')
    except Exception as e:
        logging.error(f"Error getting exchange rate: {e}")
    return None

@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ —É—á–µ—Ç–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤!\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/reg - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/add_operation - –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n"
        "/operations - –ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø–µ—Ä–∞—Ü–∏–π"
    )

@router.message(Command("reg"))
async def cmd_register(message: Message, state: FSMContext):
    chat_id = message.chat.id
    if await is_user_registered(chat_id):
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:")
    await state.set_state(RegistrationStates.waiting_for_name)

@router.message(StateFilter(RegistrationStates.waiting_for_name))
async def process_registration(message: Message, state: FSMContext):
    name = message.text.strip()
    chat_id = message.chat.id
    try:
        async with db_pool.acquire() as conn:
            await conn.execute(
                'INSERT INTO users (name, chat_id) VALUES ($1, $2)',
                name, chat_id
            )
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        await state.clear()
    except Exception:
        logging.exception("Registration error")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

@router.message(Command("add_operation"))
async def cmd_add_operation(message: Message, state: FSMContext):
    chat_id = message.chat.id
    if not await is_user_registered(chat_id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="–î–û–•–û–î", callback_data="operation_type:–î–û–•–û–î"),
        InlineKeyboardButton(text="–†–ê–°–•–û–î", callback_data="operation_type:–†–ê–°–•–û–î"),
    ]])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=kb)
    await state.set_state(OperationStates.waiting_for_type)

@router.callback_query(F.data.startswith("operation_type:"))
async def process_operation_type(cq: CallbackQuery, state: FSMContext):
    op_type = cq.data.split(":", 1)[1].strip()
    await state.update_data(operation_type=op_type)
    await cq.message.edit_text(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø: {op_type}")
    await cq.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ä—É–±–ª—è—Ö:")
    await state.set_state(OperationStates.waiting_for_amount)

@router.message(StateFilter(OperationStates.waiting_for_amount))
async def process_amount(message: Message, state: FSMContext):
    try:
        amt = float(message.text.replace(",", "."))
        await state.update_data(amount=amt)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.MM.–ì–ì–ì–ì:")
        await state.set_state(OperationStates.waiting_for_date)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")

@router.message(StateFilter(OperationStates.waiting_for_date))
async def process_date(message: Message, state: FSMContext):
    try:
        d = datetime.strptime(message.text.strip(), "%d.%m.%Y").date()
        await state.update_data(date=d)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        await state.set_state(OperationStates.waiting_for_comment)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.MM.–ì–ì–ì–ì.")

@router.message(StateFilter(OperationStates.waiting_for_comment))
async def process_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    comment = message.text.strip()
    op_type = data['operation_type'].strip()

    try:
        async with db_pool.acquire() as conn:
            await conn.execute(
                'INSERT INTO operations (date, amount, chat_id, type_operation, comment) '
                'VALUES ($1, $2, $3, $4, $5)',
                data['date'], data['amount'], message.chat.id, op_type, comment
            )
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        await state.clear()
    except Exception:
        logging.exception("Add operation error")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏.")

@router.message(Command("operations"))
async def cmd_operations(message: Message, state: FSMContext):
    chat_id = message.chat.id
    if not await is_user_registered(chat_id):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reg")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="RUB", callback_data="currency:RUB"),
        InlineKeyboardButton(text="EUR", callback_data="currency:EUR"),
        InlineKeyboardButton(text="USD", callback_data="currency:USD"),
    ]])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π:", reply_markup=kb)
    await state.set_state(ViewOperationsStates.waiting_for_currency)

@router.callback_query(F.data.startswith("currency:"))
async def process_currency(cq: CallbackQuery, state: FSMContext):
    curr = cq.data.split(":", 1)[1].strip()
    chat_id = cq.message.chat.id
    await cq.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –≤–∞–ª—é—Ç–∞: {curr}")

    rate = 1.0
    if curr in ("EUR", "USD"):
        rate = await get_exchange_rate(curr)
        if rate is None:
            await cq.message.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã")
            await state.clear()
            return

    try:
        async with db_pool.acquire() as conn:
            ops = await conn.fetch(
                'SELECT date, amount, type_operation, comment '
                'FROM operations WHERE chat_id=$1 ORDER BY date DESC',
                chat_id
            )

        if not ops:
            await cq.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–π.")
            await state.clear()
            return

        total_inc = total_exp = 0.0
        lines = [f"–í–∞—à–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤ {curr}):\n"]
        for op in ops:
            conv = float(op["amount"]) / rate
            ds = op["date"].strftime("%d.%m.%Y")
            cm = op["comment"] or "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
            if op["type_operation"] == "–î–û–•–û–î":
                total_inc += conv
                lines.append(f"üìà {ds} | +{conv:.2f} {curr} | {cm}")
            else:
                total_exp += conv
                lines.append(f"üìâ {ds} | -{conv:.2f} {curr} | {cm}")

        bal = total_inc - total_exp
        lines.append(f"\nüí∞ –ò—Ç–æ–≥–æ –¥–æ—Ö–æ–¥–æ–≤: {total_inc:.2f} {curr}")
        lines.append(f"üí∏ –ò—Ç–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: {total_exp:.2f} {curr}")
        lines.append(f"üíµ –ë–∞–ª–∞–Ω—Å: {bal:.2f} {curr}")

        await cq.message.answer("\n".join(lines))
        await state.clear()
    except Exception:
        logging.exception("Operations view error")
        await cq.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–π.")
        await state.clear()

# –†–æ—É—Ç–µ—Ä –∏ –∑–∞–ø—É—Å–∫
dp.include_router(router)

async def main():
    await init_db()
    logging.info("Start polling")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())